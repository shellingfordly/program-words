[
  {
    "word": "opt-in",
    "translation": [
      {
        "source": "google",
        "value": "使用NUXT 3，您可以通过将文件从.js重命名为.ts，或在组件中添加&lt;script lang =“ ts”&gt;。"
      },
      {
        "source": "youdaotrans",
        "value": "与Nuxt 3中,您可以选择通过重命名您的文件"
      },
      {
        "source": "baidu",
        "value": "使用Nuxt 3，您可以选择将文件从.js重命名为.ts，或在组件中添加&lt;script lang=“ts”&gt;。"
      }
    ],
    "sentence": "With Nuxt 3, you can opt-in by renaming your file from .js to .ts , or add &lt;script lang=&quot;ts&quot;&gt; in a component."
  },
  {
    "word": "prevents",
    "translation": [
      {
        "source": "google",
        "value": "完全键入的代码库可防止错误和记录API使用。"
      },
      {
        "source": "youdaotrans",
        "value": "一个完全类型代码库可以防止错误和docum"
      }
    ],
    "sentence": "A fully typed codebase prevents mistakes and documents APIs usage."
  },
  {
    "word": "reusable",
    "translation": [
      {
        "source": "google",
        "value": "在Composables/ Directory中编写您自己的自动提出的可重复使用功能。"
      },
      {
        "source": "youdaotrans",
        "value": "编写自己的auto-imported可重用的功能"
      },
      {
        "source": "baidu",
        "value": "在composables/目录中编写您自己的自动导入的可重用函数。"
      }
    ],
    "sentence": "Write your own auto-imported reusable functions in the composables/ directory."
  },
  {
    "word": "built-in",
    "translation": [
      {
        "source": "google",
        "value": "使用VUE和NUXT 3内置组合物中的自动象征反应性函数。"
      },
      { "source": "youdaotrans", "value": "使用从Vue auto-imported反应函数" }
    ],
    "sentence": "Use auto-imported Reactivity functions from Vue and Nuxt 3 built-in composables ."
  },
  {
    "word": "concern",
    "translation": [
      {
        "source": "google",
        "value": "VUE 3中引入的组合API并不是选项API的替代，但它可以在整个应用程序中更好地重复使用逻辑，并且是通过复杂组件的关注来分组代码的一种更自然的方法。"
      },
      { "source": "youdaotrans", "value": "构成API中引入Vue 3不是一个r" },
      {
        "source": "baidu",
        "value": "Vue 3中引入的Composition API不是Options API的替代品，但它可以在整个应用程序中实现更好的逻辑重用，并且是按复杂组件中的关注点对代码进行分组的更自然的方法。"
      }
    ],
    "sentence": "The Composition API introduced in Vue 3 is not a replacement of the Options API, but it enables better logic reuse throughout an application, and is a more natural way to group code by concern in complex components."
  },
  {
    "word": "natural",
    "translation": [
      {
        "source": "google",
        "value": "VUE 3中引入的组合API并不是选项API的替代，但它可以在整个应用程序中更好地重复使用逻辑，并且是通过复杂组件的关注来分组代码的一种更自然的方法。"
      },
      { "source": "youdaotrans", "value": "构成API中引入Vue 3不是一个r" },
      {
        "source": "baidu",
        "value": "Vue 3中引入的Composition API不是Options API的替代品，但它可以在整个应用程序中实现更好的逻辑重用，并且是按复杂组件中的关注点对代码进行分组的更自然的方法。"
      }
    ],
    "sentence": "The Composition API introduced in Vue 3 is not a replacement of the Options API, but it enables better logic reuse throughout an application, and is a more natural way to group code by concern in complex components."
  },
  {
    "word": "reuse",
    "translation": [
      {
        "source": "google",
        "value": "VUE 3中引入的组合API并不是选项API的替代，但它可以在整个应用程序中更好地重复使用逻辑，并且是通过复杂组件的关注来分组代码的一种更自然的方法。"
      },
      { "source": "youdaotrans", "value": "构成API中引入Vue 3不是一个r" },
      {
        "source": "baidu",
        "value": "Vue 3中引入的Composition API不是Options API的替代品，但它可以在整个应用程序中实现更好的逻辑重用，并且是按复杂组件中的关注点对代码进行分组的更自然的方法。"
      }
    ],
    "sentence": "The Composition API introduced in Vue 3 is not a replacement of the Options API, but it enables better logic reuse throughout an application, and is a more natural way to group code by concern in complex components."
  },
  {
    "word": "introduced",
    "translation": [
      {
        "source": "google",
        "value": "VUE 3中引入的组合API并不是选项API的替代，但它可以在整个应用程序中更好地重复使用逻辑，并且是通过复杂组件的关注来分组代码的一种更自然的方法。"
      },
      { "source": "youdaotrans", "value": "构成API中引入Vue 3不是一个r" },
      {
        "source": "baidu",
        "value": "Vue 3中引入的Composition API不是Options API的替代品，但它可以在整个应用程序中实现更好的逻辑重用，并且是按复杂组件中的关注点对代码进行分组的更自然的方法。"
      }
    ],
    "sentence": "The Composition API introduced in Vue 3 is not a replacement of the Options API, but it enables better logic reuse throughout an application, and is a more natural way to group code by concern in complex components."
  },
  {
    "word": "including",
    "translation": [
      {
        "source": "google",
        "value": "使用版本3，VUE的大多数功能，包括模板指令和内置组件，都是可摇摆的。"
      },
      { "source": "youdaotrans", "value": "版本3,Vue的大部分功能,包括" },
      {
        "source": "baidu",
        "value": "在版本3中，Vue的大多数功能，包括模板指令和内置组件，都是树形的。"
      }
    ],
    "sentence": "With version 3, most of Vue’s functionality, including template directives and built-in components, is tree-shakable."
  },
  {
    "word": "include",
    "translation": [
      { "source": "google", "value": "包括" },
      { "source": "youdaotrans", "value": "包括" },
      { "source": "baidu", "value": "包括" }
    ]
  },
  {
    "word": "",
    "translation": [{ "source": "reduction", "value": "" }],
    "sentence": "[:: google ::]\\n使用VUE 3和NUXT 3，将重点放在减小捆绑尺寸上。\\n\\n[:: youdaotrans ::]\\nVue 3和Nuxt 3,重点都是包子\\n---------------\\n"
  },
  {
    "word": "On top of that",
    "translation": [
      {
        "source": "google",
        "value": "最重要的是，在使用编译的单文件组件时，VUE编译器可以通过分开静态和动态标记在构建时间进一步优化它们。"
      },
      { "source": "youdaotrans", "value": "最重要的是,当使用编译单" },
      {
        "source": "baidu",
        "value": "最重要的是，当使用编译的单文件组件时，Vue编译器可以通过分离静态和动态标记在构建时进一步优化它们。"
      }
    ],
    "sentence": "On top of that, when working with compiled Single-File Components, the Vue compiler can further optimize them at build time by separating static and dynamic markup."
  },
  {
    "word": "Otherwise",
    "translation": [
      {
        "source": "google",
        "value": "否则，请转到下一章以发现NUXT：渲染模式的另一个关键功能。"
      },
      { "source": "youdaotrans", "value": "否则,去下一章发现anot" },
      {
        "source": "baidu",
        "value": "否则，请转到下一章，了解Nuxt的另一个关键功能：渲染模式。"
      }
    ],
    "sentence": "Otherwise, go to the next chapter to discover another key feature of Nuxt: Rendering modes ."
  },
  {
    "word": "evolutions",
    "translation": [
      {
        "source": "google",
        "value": "如果您是NUXT 2或VUE 2的先前用户，请继续阅读以了解Vue 2和Vue 3之间的差异，以及NUXT如何整合这些演变。"
      },
      {
        "source": "youdaotrans",
        "value": "如果你是前一个用户Nuxt 2或Vue 2,柯"
      },
      {
        "source": "baidu",
        "value": "如果您以前是Nuxt 2或Vue 2的用户，请继续阅读，了解Vue 2和Vue 3之间的差异，以及Nuxt如何集成这些演进。"
      }
    ],
    "sentence": "If you were a previous user of Nuxt 2 or Vue 2, keep reading to get a feel of the differences between Vue 2 and Vue 3, and how Nuxt integrates those evolutions."
  },
  {
    "word": "represents",
    "translation": [
      {
        "source": "google",
        "value": "app.vue文件是输入点，它表示浏览器窗口中显示的页面。"
      },
      { "source": "youdaotrans", "value": "app.vue文件的入口点,represe" },
      {
        "source": "baidu",
        "value": "应用程序。vue文件是入口点，表示浏览器窗口中显示的页面。"
      }
    ],
    "sentence": "The app.vue file is the entry point, which represents the page displayed in the browser window."
  },
  {
    "word": "major",
    "translation": [
      {
        "source": "google",
        "value": "NUXT 3集成了VUE 3，这是VUE的新主要版本，可为NUXT用户提供新的模式。"
      },
      { "source": "youdaotrans", "value": "Nuxt 3集Vue 3,新的主要版本的" },
      {
        "source": "baidu",
        "value": "Nuxt 3集成了Vue 3，Vue的新主要版本为Nuxt用户提供了新模式。"
      }
    ],
    "sentence": "Nuxt 3 integrates Vue 3, the new major release of Vue that enables new patterns for Nuxt users."
  },
  {
    "word": "integrates",
    "translation": [
      {
        "source": "google",
        "value": "NUXT 3集成了VUE 3，这是VUE的新主要版本，可为NUXT用户提供新的模式。"
      },
      { "source": "youdaotrans", "value": "Nuxt 3集Vue 3,新的主要版本的" },
      {
        "source": "baidu",
        "value": "Nuxt 3集成了Vue 3，Vue的新主要版本为Nuxt用户提供了新模式。"
      }
    ],
    "sentence": "Nuxt 3 integrates Vue 3, the new major release of Vue that enables new patterns for Nuxt users."
  },
  {
    "word": "implicit",
    "translation": [
      {
        "source": "google",
        "value": "这将完全禁用隐式自动导入，但仍然可以使用显式导入。"
      },
      { "source": "youdaotrans", "value": "这将禁用完全隐式汽车进口" },
      {
        "source": "baidu",
        "value": "这将完全禁用隐式自动导入，但仍可以使用显式导入。"
      }
    ],
    "sentence": "This will disable implicit auto imports completely but it&#39;s still possible to use Explicit Imports ."
  },
  {
    "word": "exposes",
    "translation": [
      {
        "source": "google",
        "value": "VUE 3暴露了反应性API，例如REF或计算，以及由NUXT自动提出的生命周期钩子和助手。"
      },
      { "source": "youdaotrans", "value": "Vue 3公开反应api像裁判或计算" },
      {
        "source": "baidu",
        "value": "Vue 3公开了诸如ref或computed之类的反应性API，以及由Nuxt自动导入的生命周期挂钩和帮助程序。"
      }
    ],
    "sentence": "Vue 3 exposes Reactivity APIs like ref or computed, as well as lifecycle hooks and helpers that are auto-imported by Nuxt."
  },
  {
    "word": "composables",
    "translation": [
      {
        "source": "google",
        "value": "NUXT自动IMPORTS助手功能，组合和VUE API在您的应用程序中使用，而无需明确导入它们。"
      },
      { "source": "youdaotrans", "value": "Nuxt汽车进口辅助函数,可组合" },
      {
        "source": "baidu",
        "value": "Nuxt自动导入助手函数、可组合函数和Vue API，以便在应用程序中使用，而无需显式导入它们。"
      }
    ],
    "sentence": "Nuxt auto-imports helper functions, composables and Vue APIs to use across your application without explicitly importing them."
  },
  {
    "word": "improvements",
    "translation": [
      { "source": "google", "value": "NUXT 3每天都在降落，改进和错误修复。" },
      { "source": "youdaotrans", "value": "Nuxt 3是着陆提交、改进和错误" },
      { "source": "baidu", "value": "Nuxt3每天都会提交、改进和修复bug。" }
    ],
    "sentence": "Nuxt 3 is landing commits, improvements, and bug fixes every day."
  },
  {
    "word": "configuration",
    "translation": [
      { "source": "google", "value": "配置文件的名称。" },
      { "source": "youdaotrans", "value": "配置文件的名称。" },
      { "source": "baidu", "value": "配置文件的名称。" }
    ],
    "sentence": "Name of the configuration file."
  },
  {
    "word": "performs",
    "translation": [
      {
        "source": "google",
        "value": "在幕后，设置在beforeall，theeach，aftereach和aller中执行许多任务，以正确设置NUXT测试环境。"
      },
      { "source": "youdaotrans", "value": "在幕后,设置执行大量的任务" },
      {
        "source": "baidu",
        "value": "在幕后，安装程序执行beforeAll、beforeEach、afterEach和afterAll中的许多任务，以正确设置Nuxt测试环境。"
      }
    ],
    "sentence": "Behind the scenes, setup performs a number of tasks in beforeAll, beforeEach, afterEach and afterAll to set up the Nuxt test environment correctly."
  },
  {
    "word": "advantage",
    "translation": [
      {
        "source": "google",
        "value": "在每个描述块中，您要利用 @nuxt/test-utils助手方法，您将需要在开始之前设置测试上下文。"
      },
      { "source": "youdaotrans", "value": "在每个描述块,你正在服用效果显著" },
      {
        "source": "baidu",
        "value": "在利用@nuxt/test-utils helper方法的每个描述块中，需要在开始之前设置测试上下文。"
      }
    ],
    "sentence": "In each describe block where you are taking advantage of the @nuxt/test-utils helper methods, you will need to set up the test context before beginning."
  },
  {
    "word": "receive",
    "translation": [
      { "source": "google", "value": "#Error插槽将收到错误作为道具。" },
      { "source": "youdaotrans", "value": "#错误槽将收到错误作为支撑。" },
      { "source": "baidu", "value": "#error插槽将接收错误作为属性。" }
    ],
    "sentence": "The #error slot will receive error as a prop."
  },
  {
    "word": "prevent",
    "translation": [
      {
        "source": "google",
        "value": "在客户端，它将防止错误燃烧到顶层，并呈现#Error插槽。"
      },
      { "source": "youdaotrans", "value": "在客户端,它将阻止错误的小家伙" },
      {
        "source": "baidu",
        "value": "在客户端，它将防止错误冒泡到顶层，并将呈现#error槽。"
      }
    ],
    "sentence": "On client-side, it will prevent the error from bubbling up to the top level, and will render the #error slot instead."
  },
  {
    "word": "occur",
    "translation": [
      { "source": "google", "value": "此组件负责处理其默认插槽内发生的错误。" },
      { "source": "youdaotrans", "value": "此组件负责处理错误" }
    ],
    "sentence": "This component is responsible for handling errors that occur within its default slot."
  },
  {
    "word": "responsible",
    "translation": [
      { "source": "google", "value": "此组件负责处理其默认插槽内发生的错误。" },
      { "source": "youdaotrans", "value": "此组件负责处理错误" },
      { "source": "baidu", "value": "此组件负责处理其默认插槽中发生的错误。" }
    ],
    "sentence": "This component is responsible for handling errors that occur within its default slot."
  },
  {
    "word": "without",
    "translation": [
      {
        "source": "google",
        "value": "NUXT还提供了&lt;nuxterrorboundary&gt;组件，该组件允许您在应用程序中处理客户端错误，而无需使用错误页面替换整个站点。"
      },
      {
        "source": "youdaotrans",
        "value": "Nuxt还提供了一个&lt; NuxtErrorBoundary &gt;组件"
      },
      {
        "source": "baidu",
        "value": "Nuxt还提供了一个&lt;NuxtErrorBoundary&gt;组件，允许您处理应用程序中的客户端错误，而无需用错误页面替换整个站点。"
      }
    ],
    "sentence": "Nuxt also provides a &lt;NuxtErrorBoundary&gt; component that allows you to handle client-side errors within your app, without replacing your entire site with an error page."
  },
  {
    "word": "instead",
    "translation": [
      { "source": "google", "value": "建议使用throw createError（）。" },
      { "source": "youdaotrans", "value": "建议而不是使用显示createError扔" },
      { "source": "baidu", "value": "建议改用throw createError（）。" }
    ],
    "sentence": "It is recommended instead to use throw createError()."
  },
  {
    "word": "until",
    "translation": [
      {
        "source": "google",
        "value": "请确保在使用依赖于NUXT插件的任何内容（例如$ ROUTE或USEROUTER）之前检查一下，好像插件会丢弃错误，然后才能重新运行，直到您清除错误。"
      },
      { "source": "youdaotrans", "value": "确保在使用前检查任何依赖" },
      {
        "source": "baidu",
        "value": "在使用任何依赖于Nuxt插件（如$route或useRouter）的插件之前，请确保先进行检查，就好像插件抛出了错误一样，然后在您清除错误之前，它不会重新运行。"
      }
    ],
    "sentence": "Make sure to check before using anything dependent on Nuxt plugins, such as $route or useRouter, as if a plugin threw an error, then it won&#39;t be re-run until you clear the error."
  },
  {
    "word": "customize",
    "translation": [
      {
        "source": "google",
        "value": "您可以通过在应用程序的源目录中添加〜/error.vue来自定义此错误页面，以及app.vue。"
      },
      { "source": "youdaotrans", "value": "你可以定制错误页面通过添加~ /埃罗" },
      {
        "source": "baidu",
        "value": "您可以通过添加~/error自定义此错误页。vue位于应用程序的源目录中，旁边是app.vue。"
      }
    ],
    "sentence": "You can customize this error page by adding ~/error.vue in the source directory of your application, alongside app.vue."
  },
  {
    "word": "fatal",
    "translation": [
      {
        "source": "google",
        "value": "当NUXT遇到致命错误，无论是在服务器生命周期期间还是在渲染VUE应用程序（SSR和SPA）时，它将呈现JSON响应（如果要求使用Accept/json header）或HTML错误页面。"
      },
      { "source": "youdaotrans", "value": "当Nuxt遇到致命错误时,是否在" },
      {
        "source": "baidu",
        "value": "当Nuxt遇到致命错误时，无论是在服务器生命周期中，还是在呈现Vue应用程序（SSR和SPA）时，它都会呈现JSON响应（如果使用Accept:application/JSON头请求）或HTML错误页。"
      }
    ],
    "sentence": "When Nuxt encounters a fatal error, whether during the server lifecycle, or when rendering your Vue application (both SSR and SPA), it will either render a JSON response (if requested with Accept: application/json header) or an HTML error page."
  },
  {
    "word": "encounters",
    "translation": [
      {
        "source": "google",
        "value": "当NUXT遇到致命错误，无论是在服务器生命周期期间还是在渲染VUE应用程序（SSR和SPA）时，它将呈现JSON响应（如果要求使用Accept/json header）或HTML错误页面。"
      },
      { "source": "youdaotrans", "value": "当Nuxt遇到致命错误时,是否在" },
      {
        "source": "baidu",
        "value": "当Nuxt遇到致命错误时，无论是在服务器生命周期中，还是在呈现Vue应用程序（SSR和SPA）时，它都会呈现JSON响应（如果使用Accept:application/JSON头请求）或HTML错误页。"
      }
    ],
    "sentence": "When Nuxt encounters a fatal error, whether during the server lifecycle, or when rendering your Vue application (both SSR and SPA), it will either render a JSON response (if requested with Accept: application/json header) or an HTML error page."
  },
  {
    "word": "see the next section",
    "translation": [
      {
        "source": "google",
        "value": "您当前无法为这些错误定义服务器端处理程序，但可以呈现一个错误页面（请参阅下一节）。"
      },
      {
        "source": "youdaotrans",
        "value": "你不能现在定义一个服务器端处理程序"
      },
      {
        "source": "baidu",
        "value": "当前无法为这些错误定义服务器端处理程序，但可以呈现错误页（请参阅下一节）。"
      }
    ],
    "sentence": "You cannot currently define a server-side handler for these errors, but can render an error page (see the next section)."
  },
  {
    "word": "currently",
    "translation": [
      {
        "source": "google",
        "value": "您当前无法为这些错误定义服务器端处理程序，但可以呈现一个错误页面（请参阅下一节）。"
      },
      {
        "source": "youdaotrans",
        "value": "你不能现在定义一个服务器端处理程序"
      },
      {
        "source": "baidu",
        "value": "当前无法为这些错误定义服务器端处理程序，但可以呈现错误页（请参阅下一节）。"
      }
    ],
    "sentence": "You cannot currently define a server-side handler for these errors, but can render an error page (see the next section)."
  },
  {
    "word": "processing",
    "translation": [
      {
        "source": "google",
        "value": "处理应用程序：创建和应用程序：beforemount钩子"
      },
      {
        "source": "youdaotrans",
        "value": "处理程序:创建和应用:beforeMount钩子"
      },
      { "source": "baidu", "value": "处理app:created和app:beforeMount挂钩" }
    ],
    "sentence": "processing app:created and app:beforeMount hooks"
  },
  {
    "word": "even",
    "translation": [
      { "source": "google", "value": "即使处理它们，它也会收到所有VUE错误。" },
      { "source": "youdaotrans", "value": "它将得到所有Vue错误,即使他们是h" },
      { "source": "baidu", "value": "它将接收所有Vue错误，即使它们已被处理。" }
    ],
    "sentence": "It will receive all Vue errors, even if they are handled."
  },
  {
    "word": "In addition",
    "translation": [
      {
        "source": "google",
        "value": "此外，NUXT提供了一个VUE：错误挂钩，如果任何错误传播到顶级，将被调用。"
      },
      { "source": "youdaotrans", "value": "此外,Nuxt vue:提供了一个错误钩,w" },
      {
        "source": "baidu",
        "value": "此外，Nuxt提供了一个vue:error钩子，如果有错误传播到顶层，就会调用它。"
      }
    ],
    "sentence": "In addition, Nuxt provides a vue:error hook that will be called if any errors propagate up to the top level."
  },
  {
    "word": "unpreventable",
    "translation": [
      {
        "source": "google",
        "value": "NUXT 3是一个完整的堆栈框架，这意味着在不同上下文中可能发生的不可避免的用户运行时错误来源："
      },
      {
        "source": "youdaotrans",
        "value": "Nuxt 3是一个完整的框架,这意味着其他"
      }
    ],
    "sentence": "Nuxt 3 is a full-stack framework, which means there are several sources of unpreventable user runtime errors that can happen in different contexts:"
  },
  {
    "word": "Advanced",
    "translation": [
      { "source": "google", "value": "先进的" },
      { "source": "youdaotrans", "value": "先进的" },
      { "source": "baidu", "value": "先进的" }
    ],
    "sentence": "Advanced"
  },
  {
    "word": "memory leaks",
    "translation": [
      {
        "source": "google",
        "value": "此类状态将在所有访问您的网站的用户中共享，并可能导致内存泄漏！"
      },
      { "source": "youdaotrans", "value": "这样的状态将跨visitin所有用户共享" },
      {
        "source": "baidu",
        "value": "这样的状态将在访问您网站的所有用户之间共享，并可能导致内存泄漏！"
      }
    ],
    "sentence": "Such state will be shared across all users visiting your website and can lead to memory leaks!"
  },
  {
    "word": "contain",
    "translation": [
      {
        "source": "google",
        "value": "因为USESTATE内部的数据将被序列化为JSON，因此重要的是，它不包含无法序列化的任何内容，例如类，功能或符号。"
      },
      { "source": "youdaotrans", "value": "因为数据在useState将序列化" },
      {
        "source": "baidu",
        "value": "因为useState中的数据将被序列化为JSON，所以重要的是它不包含任何无法序列化的内容，例如类、函数或符号。"
      }
    ],
    "sentence": "Because the data inside useState will be serialized to JSON, it is important that it does not contain anything that cannot be serialized, such as classes, functions or symbols."
  },
  {
    "word": "be serialized to",
    "translation": [
      {
        "source": "google",
        "value": "因为USESTATE内部的数据将被序列化为JSON，因此重要的是，它不包含无法序列化的任何内容，例如类，功能或符号。"
      },
      { "source": "youdaotrans", "value": "因为数据在useState将序列化" },
      {
        "source": "baidu",
        "value": "因为useState中的数据将被序列化为JSON，所以重要的是它不包含任何无法序列化的内容，例如类、函数或符号。"
      }
    ],
    "sentence": "Because the data inside useState will be serialized to JSON, it is important that it does not contain anything that cannot be serialized, such as classes, functions or symbols."
  },
  {
    "word": "inside",
    "translation": [
      {
        "source": "google",
        "value": "因为USESTATE内部的数据将被序列化为JSON，因此重要的是，它不包含无法序列化的任何内容，例如类，功能或符号。"
      },
      { "source": "youdaotrans", "value": "因为数据在useState将序列化" },
      {
        "source": "baidu",
        "value": "因为useState中的数据将被序列化为JSON，所以重要的是它不包含任何无法序列化的内容，例如类、函数或符号。"
      }
    ],
    "sentence": "Because the data inside useState will be serialized to JSON, it is important that it does not contain anything that cannot be serialized, such as classes, functions or symbols."
  },
  {
    "word": "hydration",
    "translation": [
      {
        "source": "google",
        "value": "其值将在服务器端渲染（在客户端水合期间）之后保留，并使用唯一的密钥在所有组件上共享。"
      },
      { "source": "youdaotrans", "value": "服务器端撕裂后其价值将被保留下来" },
      {
        "source": "baidu",
        "value": "其值将在服务器端渲染（客户端水合期间）后保留，并使用唯一密钥在所有组件之间共享。"
      }
    ],
    "sentence": "Its value will be preserved after server-side rendering (during client-side hydration) and shared across all components using a unique key."
  },
  {
    "word": "preserved",
    "translation": [
      {
        "source": "google",
        "value": "其值将在服务器端渲染（在客户端水合期间）之后保留，并使用唯一的密钥在所有组件上共享。"
      },
      { "source": "youdaotrans", "value": "服务器端撕裂后其价值将被保留下来" }
    ],
    "sentence": "Its value will be preserved after server-side rendering (during client-side hydration) and shared across all components using a unique key."
  },
  {
    "word": "convenience",
    "translation": [
      {
        "source": "google",
        "value": "另外，它具有便利功能，包括自动解析响应和串联数据。"
      },
      { "source": "youdaotrans", "value": "另外,它还提供了方便的特性包括" },
      {
        "source": "baidu",
        "value": "此外，它还具有方便的功能，包括自动解析响应和字符串化数据。"
      }
    ],
    "sentence": "Plus, it comes with convenience features including automatically parsing responses and stringifying data."
  },
  {
    "word": "Plus",
    "translation": [
      {
        "source": "google",
        "value": "另外，它具有便利功能，包括自动解析响应和串联数据。"
      },
      { "source": "youdaotrans", "value": "另外,它还提供了方便的特性包括" },
      {
        "source": "baidu",
        "value": "此外，它还具有方便的功能，包括自动解析响应和字符串化数据。"
      }
    ],
    "sentence": "Plus, it comes with convenience features including automatically parsing responses and stringifying data."
  },
  {
    "word": "smartly",
    "translation": [
      {
        "source": "google",
        "value": "如果它在服务器上运行，它将处理“巧妙”的API调用，或者如果在客户端上运行的API，则将其处理。"
      },
      { "source": "youdaotrans", "value": "它将处理“巧妙”我直接API调用" },
      {
        "source": "baidu",
        "value": "如果它在服务器上运行，它将“智能地”处理直接API调用，如果它在客户端运行，则会对您的API进行客户端调用。"
      }
    ],
    "sentence": "It will handle &#39;smartly&#39; making direct API calls if it&#39;s running on the server, or making a client-side call to your API if it&#39;s running on the client."
  },
  {
    "word": "benefits",
    "translation": [
      { "source": "google", "value": "使用$ fetch有很多好处，包括：" },
      { "source": "youdaotrans", "value": "使用美元获取有许多好处,包括:" },
      { "source": "baidu", "value": "使用$fetch有很多好处，包括：" }
    ],
    "sentence": "Using $fetch has a number of benefits, including:"
  },
  {
    "word": "available",
    "translation": [
      {
        "source": "google",
        "value": "NUXT 3使用UNJS/OHMYFETCH（除了获取）提供了与Fetch API相同的API的全球可用$ Fetch方法。"
      },
      {
        "source": "youdaotrans",
        "value": "Nuxt 3提供了一个全局可用美元获取方法"
      },
      {
        "source": "baidu",
        "value": "Nuxt 3提供了一个全局可用的$fetch方法，它使用unjs/ohmyfetch（除了fetch之外）和fetch API使用相同的API。"
      }
    ],
    "sentence": "Nuxt 3 provides a globally available $fetch method using unjs/ohmyfetch (in addition to fetch) with the same API as the Fetch API ."
  },
  {
    "word": "directly",
    "translation": [
      { "source": "google", "value": "直接地" },
      { "source": "youdaotrans", "value": "直接" },
      { "source": "baidu", "value": "直接地" }
    ]
  },
  {
    "word": "",
    "translation": [{ "source": "top-level", "value": "" }],
    "sentence": "[:: google ::]\\n建议使用&lt;脚本设置&gt;，因为它消除了使用顶级等待的限制。\\n\\n[:: youdaotrans ::]\\n建议使用&lt;脚本设置&gt;,因为它删除\\n\\n[:: baidu ::]\\n建议使用&lt;script-setup&gt;，因为它消除了使用顶级等待的限制。\\n---------------\\n"
  },
  {
    "word": "operations",
    "translation": [
      {
        "source": "google",
        "value": "（这是VUE 3的限制。）如果要使用多个async操作，例如多个使用fusefetch的调用，则需要在设置结束时使用&lt;script setup&gt;或等待它们。"
      },
      { "source": "youdaotrans", "value": "(这是Vue 3限制。)如果你想使用m" },
      {
        "source": "baidu",
        "value": "（这是Vue 3限制。）如果要使用多个异步操作，例如多次调用useFetch，则需要使用&lt;script-setup&gt;或在安装结束时一起等待。"
      }
    ],
    "sentence": "(This is a Vue 3 limitation.) If you want to use multiple async operations, such as multiple calls to useFetch, you will need to use &lt;script setup&gt; or await them together at the end of setup."
  },
  {
    "word": "limitation",
    "translation": [
      {
        "source": "google",
        "value": "（这是VUE 3的限制。）如果要使用多个async操作，例如多个使用fusefetch的调用，则需要在设置结束时使用&lt;script setup&gt;或等待它们。"
      },
      { "source": "youdaotrans", "value": "(这是Vue 3限制。)如果你想使用m" },
      {
        "source": "baidu",
        "value": "（这是Vue 3限制。）如果要使用多个异步操作，例如多次调用useFetch，则需要使用&lt;script-setup&gt;或在安装结束时一起等待。"
      }
    ],
    "sentence": "(This is a Vue 3 limitation.) If you want to use multiple async operations, such as multiple calls to useFetch, you will need to use &lt;script setup&gt; or await them together at the end of setup."
  },
  {
    "word": "Imagine",
    "translation": [
      {
        "source": "google",
        "value": "想象一下/api/山/珠穆朗玛峰返回以下对象："
      },
      { "source": "youdaotrans", "value": "想象/ api /山脉珠穆朗玛峰返回佛" },
      { "source": "baidu", "value": "假设/api/mounts/everest返回以下对象：" }
    ],
    "sentence": "Imagine that /api/mountains/everest returns the following object:"
  },
  {
    "word": "recommend",
    "translation": [
      {
        "source": "google",
        "value": "我们强烈建议您仅选择将在组件中使用的键。"
      },
      { "source": "youdaotrans", "value": "我们强烈建议你只选择键那" },
      { "source": "baidu", "value": "我们强烈建议您只选择将在组件中使用的键。" }
    ],
    "sentence": "We strongly recommend you only select the keys that you will use in your component."
  },
  {
    "word": "direction",
    "translation": [
      {
        "source": "google",
        "value": "如果您想向另一个方向传递/代理cookie，从内部请求回到客户端，则需要自己处理。"
      },
      { "source": "youdaotrans", "value": "如果你想传递/代理饼干" },
      {
        "source": "baidu",
        "value": "如果您想从另一个方向将/代理cookie从内部请求传递回客户端，则需要自己处理。"
      }
    ],
    "sentence": "If you want to pass on/proxy cookies in the other direction, from an internal request back to the client, you will need to handle this yourself."
  },
  {
    "word": "access",
    "translation": [
      {
        "source": "google",
        "value": "下面的示例将请求标头添加到同构$提取调用中，以确保API端点可以访问用户最初发送的同一cookie头。"
      },
      { "source": "youdaotrans", "value": "下面的例子将请求头添加到一个我" },
      {
        "source": "baidu",
        "value": "下面的示例将请求头添加到同构的$fetch调用中，以确保API端点可以访问用户最初发送的相同cookie头。"
      }
    ],
    "sentence": "The example below adds the request headers to an isomorphic $fetch call to ensure that the API endpoint has access to the same cookie header originally sent by the user."
  },
  {
    "word": "endpoint",
    "translation": [
      {
        "source": "google",
        "value": "下面的示例将请求标头添加到同构$提取调用中，以确保API端点可以访问用户最初发送的同一cookie头。"
      },
      { "source": "youdaotrans", "value": "下面的例子将请求头添加到一个我" },
      {
        "source": "baidu",
        "value": "下面的示例将请求头添加到同构的$fetch调用中，以确保API端点可以访问用户最初发送的相同cookie头。"
      }
    ],
    "sentence": "The example below adds the request headers to an isomorphic $fetch call to ensure that the API endpoint has access to the same cookie header originally sent by the user."
  },
  {
    "word": "ensure",
    "translation": [
      {
        "source": "google",
        "value": "下面的示例将请求标头添加到同构$提取调用中，以确保API端点可以访问用户最初发送的同一cookie头。"
      },
      { "source": "youdaotrans", "value": "下面的例子将请求头添加到一个我" },
      {
        "source": "baidu",
        "value": "下面的示例将请求头添加到同构的$fetch调用中，以确保API端点可以访问用户最初发送的相同cookie头。"
      }
    ],
    "sentence": "The example below adds the request headers to an isomorphic $fetch call to ensure that the API endpoint has access to the same cookie header originally sent by the user."
  },
  {
    "word": "below",
    "translation": [
      {
        "source": "google",
        "value": "下面的示例将请求标头添加到同构$提取调用中，以确保API端点可以访问用户最初发送的同一cookie头。"
      },
      { "source": "youdaotrans", "value": "下面的例子将请求头添加到一个我" },
      {
        "source": "baidu",
        "value": "下面的示例将请求头添加到同构的$fetch调用中，以确保API端点可以访问用户最初发送的相同cookie头。"
      }
    ],
    "sentence": "The example below adds the request headers to an isomorphic $fetch call to ensure that the API endpoint has access to the same cookie header originally sent by the user."
  },
  {
    "word": "nor",
    "translation": [
      {
        "source": "google",
        "value": "但是在服务器端渲染期间，由于提取请求在服务器内“内部”进行，因此不包括用户的浏览器cookie，也不包括从获取响应中传递cookie。"
      },
      {
        "source": "youdaotrans",
        "value": "但在server-side-rendering,因为取回"
      },
      {
        "source": "baidu",
        "value": "但在服务器端呈现期间，由于提取请求在服务器内部发生，因此它不包括用户的浏览器cookie，也不从提取响应传递cookie。"
      }
    ],
    "sentence": "But during server-side-rendering, since the fetch request takes place &#39;internally&#39; within the server, it doesn&#39;t include the user&#39;s browser cookies, nor does it pass on cookies from the fetch response."
  },
  {
    "word": "takes place",
    "translation": [
      {
        "source": "google",
        "value": "但是在服务器端渲染期间，由于提取请求在服务器内“内部”进行，因此不包括用户的浏览器cookie，也不包括从获取响应中传递cookie。"
      },
      {
        "source": "youdaotrans",
        "value": "但在server-side-rendering,因为取回"
      },
      {
        "source": "baidu",
        "value": "但在服务器端呈现期间，由于提取请求在服务器内部发生，因此它不包括用户的浏览器cookie，也不从提取响应传递cookie。"
      }
    ],
    "sentence": "But during server-side-rendering, since the fetch request takes place &#39;internally&#39; within the server, it doesn&#39;t include the user&#39;s browser cookies, nor does it pass on cookies from the fetch response."
  },
  {
    "word": "isomorphic",
    "translation": [
      { "source": "google", "value": "同构" },
      { "source": "youdaotrans", "value": "同构" },
      { "source": "baidu", "value": "同构的" }
    ]
  },
  {
    "word": "",
    "translation": [{ "source": "perform", "value": "" }],
    "sentence": "[:: google ::]\\nNUXT 3提供了一种在选项API中执行异步提取的方法。\\n\\n[:: youdaotrans ::]\\n执行叨咕asyncData Nuxt 3提供了一种方法\\n\\n[:: baidu ::]\\nNuxt 3提供了一种在Options API中执行异步数据获取的方法。\\n---------------\\n"
  },
  {
    "word": "release",
    "translation": [
      {
        "source": "google",
        "value": "在NUXT 3的稳定发布之前，对异步的API支持可能会发生变化。"
      },
      { "source": "youdaotrans", "value": "选择API支持asyncData很可能改变" },
      {
        "source": "baidu",
        "value": "在Nuxt 3稳定发布之前，对asyncData的选项API支持可能会发生变化。"
      }
    ],
    "sentence": "Options API support for asyncData may well change before the stable release of Nuxt 3."
  },
  {
    "word": "Invalidate",
    "translation": [
      {
        "source": "google",
        "value": "使UseAsyncdata，UselazyAsyncdata，usefetch和uselazyfetch的缓存无效，并触发了Refetch。"
      },
      {
        "source": "youdaotrans",
        "value": "无效的缓存useAsyncData useLazyAsync"
      },
      {
        "source": "baidu",
        "value": "使useAsyncData、useLazyAsync数据、useFetch和useLazzyFetch的缓存无效，并触发refetch。"
      }
    ],
    "sentence": "Invalidate the cache of useAsyncData, useLazyAsyncData, useFetch and useLazyFetch and trigger the refetch."
  },
  {
    "word": "paginate",
    "translation": [
      {
        "source": "google",
        "value": "如果用户选择分页，过滤结果，搜索等，可能会发生这种情况。"
      },
      { "source": "youdaotrans", "value": "这可能发生,如果用户选择随意翻阅,f" },
      {
        "source": "baidu",
        "value": "如果用户选择分页、筛选结果、搜索等，则可能发生这种情况。"
      }
    ],
    "sentence": "This can happen if the user chooses to paginate, filter results, search, etc."
  },
  {
    "word": "course",
    "translation": [
      {
        "source": "google",
        "value": "有时，在用户的页面访问过程中，您可能需要刷新从API中加载的数据。"
      },
      { "source": "youdaotrans", "value": "有时在用户的pag的进程" },
      {
        "source": "baidu",
        "value": "有时，在用户的页面访问过程中，可能需要刷新从API加载的数据。"
      }
    ],
    "sentence": "Sometimes throughout the course of your user&#39;s page visit, you may need to refresh the data loaded from the API."
  },
  {
    "word": "throughout",
    "translation": [
      {
        "source": "google",
        "value": "有时，在用户的页面访问过程中，您可能需要刷新从API中加载的数据。"
      },
      { "source": "youdaotrans", "value": "有时在用户的pag的进程" },
      {
        "source": "baidu",
        "value": "有时，在用户的页面访问过程中，可能需要刷新从API加载的数据。"
      }
    ],
    "sentence": "Sometimes throughout the course of your user&#39;s page visit, you may need to refresh the data loaded from the API."
  },
  {
    "word": "equivalent",
    "translation": [
      {
        "source": "google",
        "value": "USEFETCH（URL）几乎等同于Useasyncdata（url，（）=&gt; $ fetch（url）） - 最常见用例的开发人员体验糖。"
      },
      {
        "source": "youdaotrans",
        "value": "useFetch (url)几乎是相当于useAsyncData"
      },
      {
        "source": "baidu",
        "value": "useFetch（url）几乎等同于useAsyncData（url，（）=&gt;$fetch（url）），它是最常见用例的开发者体验糖。"
      }
    ],
    "sentence": "useFetch(url) is nearly equivalent to useAsyncData(url, () =&gt; $fetch(url)) - it&#39;s developer experience sugar for the most common use case."
  },
  {
    "word": "complex",
    "translation": [
      {
        "source": "google",
        "value": "简而言之，Usefetch接收一个URL并获取该数据，而Useasyncdata可能具有更复杂的逻辑。"
      },
      { "source": "youdaotrans", "value": "总之,useFetch接收一个URL并得到哒" },
      {
        "source": "baidu",
        "value": "简而言之，useFetch接收URL并获取数据，而useAsyncData可能具有更复杂的逻辑。"
      }
    ],
    "sentence": "In brief, useFetch receives a URL and gets that data, whereas useAsyncData might have more complex logic."
  },
  {
    "word": "whereas",
    "translation": [
      {
        "source": "google",
        "value": "简而言之，Usefetch接收一个URL并获取该数据，而Useasyncdata可能具有更复杂的逻辑。"
      },
      { "source": "youdaotrans", "value": "总之,useFetch接收一个URL并得到哒" },
      {
        "source": "baidu",
        "value": "简而言之，useFetch接收URL并获取数据，而useAsyncData可能具有更复杂的逻辑。"
      }
    ],
    "sentence": "In brief, useFetch receives a URL and gets that data, whereas useAsyncData might have more complex logic."
  },
  {
    "word": "receives",
    "translation": [
      {
        "source": "google",
        "value": "简而言之，Usefetch接收一个URL并获取该数据，而Useasyncdata可能具有更复杂的逻辑。"
      },
      { "source": "youdaotrans", "value": "总之,useFetch接收一个URL并得到哒" },
      {
        "source": "baidu",
        "value": "简而言之，useFetch接收URL并获取数据，而useAsyncData可能具有更复杂的逻辑。"
      }
    ],
    "sentence": "In brief, useFetch receives a URL and gets that data, whereas useAsyncData might have more complex logic."
  },
  {
    "word": "In brief",
    "translation": [
      {
        "source": "google",
        "value": "简而言之，Usefetch接收一个URL并获取该数据，而Useasyncdata可能具有更复杂的逻辑。"
      },
      { "source": "youdaotrans", "value": "总之,useFetch接收一个URL并得到哒" },
      {
        "source": "baidu",
        "value": "简而言之，useFetch接收URL并获取数据，而useAsyncData可能具有更复杂的逻辑。"
      }
    ],
    "sentence": "In brief, useFetch receives a URL and gets that data, whereas useAsyncData might have more complex logic."
  },
  {
    "word": "asynchronously",
    "translation": [
      {
        "source": "google",
        "value": "在您的页面，组件和插件中，您可以使用useasyncdata来访问异步解决的数据。"
      },
      { "source": "youdaotrans", "value": "在你的页面,组件和插件" },
      {
        "source": "baidu",
        "value": "在页面、组件和插件中，可以使用useAsyncData访问异步解析的数据。"
      }
    ],
    "sentence": "Within your pages, components and plugins you can use useAsyncData to get access to data that resolves asynchronously."
  },
  {
    "word": "block",
    "translation": [
      { "source": "google", "value": "换句话说，异步函数不会阻止导航。" },
      { "source": "youdaotrans", "value": "换句话说,异步函数并不阻止" },
      { "source": "baidu", "value": "换句话说，异步函数不会阻止导航。" }
    ],
    "sentence": "In other words, the async function does not block navigation."
  },
  {
    "word": "generates",
    "translation": [
      {
        "source": "google",
        "value": "它会自动生成基于URL和获取选项的键，根据服务器路由提供请求URL的类型提示，并侵入API响应类型。"
      },
      { "source": "youdaotrans", "value": "它会自动生成基于URL和一个关键" },
      {
        "source": "baidu",
        "value": "它根据URL和获取选项自动生成密钥，根据服务器路由为请求URL提供类型提示，并推断API响应类型。"
      }
    ],
    "sentence": "It automatically generates a key based on URL and fetch options, provides type hints for request url based on server routes, and infers API response type."
  },
  {
    "word": "convenient",
    "translation": [
      {
        "source": "google",
        "value": "这种组合可在Useasyncdata和$ Fetch周围提供方便的包装。"
      },
      { "source": "youdaotrans", "value": "这arou可组合提供了一个方便的包装器" }
    ],
    "sentence": "This composable provides a convenient wrapper around useAsyncData and $fetch."
  },
  {
    "word": "composable",
    "translation": [
      {
        "source": "google",
        "value": "这种组合可在Useasyncdata和$ Fetch周围提供方便的包装。"
      },
      {
        "source": "youdaotrans",
        "value": "这arou可组合提供了一个方便的包装器"
      },
      {
        "source": "baidu",
        "value": "这一可组合文件为useAsyncData和$fetch提供了一个方便的包装。"
      }
    ],
    "sentence": "This composable provides a convenient wrapper around useAsyncData and $fetch."
  },
  {
    "word": "universally",
    "translation": [
      {
        "source": "google",
        "value": "在您的页面，组件和插件中，您可以使用usefetch从任何URL普遍获取。"
      },
      { "source": "youdaotrans", "value": "在你的页面,组件和插件" },
      {
        "source": "baidu",
        "value": "在您的页面、组件和插件中，您可以使用useFetch从任何URL进行通用提取。"
      }
    ],
    "sentence": "Within your pages, components and plugins you can use useFetch to universally fetch from any URL."
  },
  {
    "word": "authenticated",
    "translation": [
      {
        "source": "google",
        "value": "导出默认default defareenuxtRoutemiddleware（（（to，from）=&gt; {// isAuthEnticated（）是一个示例方法，如果（Isauthenticatienatisticated（）= = = false）{return navigateto（&#39;/login&#39;/login&#39;）}}}}}}}}）"
      },
      {
        "source": "youdaotrans",
        "value": "导出默认defineNuxtRouteMiddleware ((,"
      },
      {
        "source": "baidu",
        "value": "export default defineNuxtRouteMiddleware（（to，from）=&gt;{//isAuthenticated（）是一个示例方法，用于验证用户是否通过身份验证，如果（isAutheenticated（（）===false）{return navigateTo（&#39;/login&#39;）}}）"
      }
    ],
    "sentence": "export default defineNuxtRouteMiddleware((to, from) =&gt; { // isAuthenticated() is an example method verifying if an user is authenticated if (isAuthenticated() === false) { return navigateTo(&#39;/login&#39;) } })"
  },
  {
    "word": "protecting",
    "translation": [
      { "source": "google", "value": "保护 /仪表板页面的身份中间件的示例：" },
      { "source": "youdaotrans", "value": "auth中间件保护/破折号的例子" }
    ],
    "sentence": "Example of an auth middleware protecting the /dashboard page:"
  },
  {
    "word": "kebab",
    "translation": [
      {
        "source": "google",
        "value": "（注意：路由中间件名称归一化为烤肉串，因此somemiddleware成为中间软件。）"
      },
      { "source": "youdaotrans", "value": "(注意:中间件的名字是规范化的路线" }
    ],
    "sentence": "(Note: The route middleware name is normalized to kebab-case, so someMiddleware becomes some-middleware.)"
  },
  {
    "word": "normalized",
    "translation": [
      {
        "source": "google",
        "value": "（注意：路由中间件名称归一化为烤肉串，因此somemiddleware成为中间软件。）"
      },
      { "source": "youdaotrans", "value": "(注意:中间件的名字是规范化的路线" },
      {
        "source": "baidu",
        "value": "（注意：路由中间件名称规范化为kebab case，因此someMiddleware成为了一些中间件。）"
      }
    ],
    "sentence": "(Note: The route middleware name is normalized to kebab-case, so someMiddleware becomes some-middleware.)"
  },
  {
    "word": "via",
    "translation": [
      {
        "source": "google",
        "value": "名为Route Middleware，将其放置在中间件/目录中，并将在页面上使用时通过异步导入自动加载。"
      },
      { "source": "youdaotrans", "value": "指定路线中间件,放置在mi" },
      {
        "source": "baidu",
        "value": "命名路由中间件，位于中间件/目录中，在页面上使用时将通过异步导入自动加载。"
      }
    ],
    "sentence": "Named route middleware, which are placed in the middleware/ directory and will be automatically loaded via asynchronous import when used on a page."
  },
  {
    "word": "asynchronous",
    "translation": [
      {
        "source": "google",
        "value": "名为Route Middleware，将其放置在中间件/目录中，并将在页面上使用时通过异步导入自动加载。"
      },
      { "source": "youdaotrans", "value": "指定路线中间件,放置在mi" },
      {
        "source": "baidu",
        "value": "命名路由中间件，位于中间件/目录中，在页面上使用时将通过异步导入自动加载。"
      }
    ],
    "sentence": "Named route middleware, which are placed in the middleware/ directory and will be automatically loaded via asynchronous import when used on a page."
  },
  {
    "word": "Anonymous",
    "translation": [
      {
        "source": "google",
        "value": "匿名（或内联）路由中间件，直接在使用它们的页面中定义。"
      },
      { "source": "youdaotrans", "value": "匿名(或内联)路线中间件," },
      {
        "source": "baidu",
        "value": "匿名（或内联）路由中间件，直接在使用它们的页面中定义。"
      }
    ],
    "sentence": "Anonymous (or inline) route middleware, which are defined directly in the pages where they are used."
  },
  {
    "word": "different from",
    "translation": [
      {
        "source": "google",
        "value": "尽管名称相似，但它们与服务器中间件完全不同，服务器中间件在应用程序的Nitro Server一部分中运行。"
      },
      { "source": "youdaotrans", "value": "尽管类似的名字,他们是完全不同的" },
      {
        "source": "baidu",
        "value": "尽管名称相似，但它们与运行在应用程序的Nitro服务器部分的服务器中间件完全不同。"
      }
    ],
    "sentence": "Despite the similar name, they are completely different from server middleware, which are run in the Nitro server part of your app."
  },
  {
    "word": "completely",
    "translation": [
      {
        "source": "google",
        "value": "尽管名称相似，但它们与服务器中间件完全不同，服务器中间件在应用程序的Nitro Server一部分中运行。"
      },
      { "source": "youdaotrans", "value": "尽管类似的名字,他们是完全不同的" },
      {
        "source": "baidu",
        "value": "尽管名称相似，但它们与运行在应用程序的Nitro服务器部分的服务器中间件完全不同。"
      }
    ],
    "sentence": "Despite the similar name, they are completely different from server middleware, which are run in the Nitro server part of your app."
  },
  {
    "word": "within",
    "translation": [
      {
        "source": "google",
        "value": "路由中间件在NUXT应用程序的VUE部分内运行。"
      },
      { "source": "youdaotrans", "value": "路线中间件运行中的Vue N的一部分" },
      {
        "source": "baidu",
        "value": "路由中间件在Nuxt应用程序的Vue部分中运行。"
      }
    ],
    "sentence": "Route middleware run within the Vue part of your Nuxt app."
  },
  {
    "word": "Despite",
    "translation": [
      {
        "source": "google",
        "value": "尽管名称相似，但它们与服务器中间件完全不同，服务器中间件在应用程序的Nitro Server一部分中运行。"
      },
      { "source": "youdaotrans", "value": "尽管类似的名字,他们是完全不同的" },
      {
        "source": "baidu",
        "value": "尽管名称相似，但它们与运行在应用程序的Nitro服务器部分的服务器中间件完全不同。"
      }
    ],
    "sentence": "Despite the similar name, they are completely different from server middleware, which are run in the Nitro server part of your app."
  },
  {
    "word": "extracting",
    "translation": [
      {
        "source": "google",
        "value": "NUXT提供了一个可自定义的路由中间件框架，您可以在整个应用程序中使用，非常适合在导航到特定路线之前提取要运行的代码。"
      },
      {
        "source": "youdaotrans",
        "value": "中间件弗拉姆号Nuxt提供了一个可定制的路线"
      },
      {
        "source": "baidu",
        "value": "Nuxt提供了一个可定制的路由中间件框架，可以在整个应用程序中使用，非常适合于在导航到特定路由之前提取要运行的代码。"
      }
    ],
    "sentence": "Nuxt provides a customizable route middleware framework you can use throughout your application, ideal for extracting code that you want to run before navigating to a particular route."
  },
  {
    "word": "ideal for",
    "translation": [
      {
        "source": "google",
        "value": "NUXT提供了一个可自定义的路由中间件框架，您可以在整个应用程序中使用，非常适合在导航到特定路线之前提取要运行的代码。"
      },
      {
        "source": "youdaotrans",
        "value": "中间件弗拉姆号Nuxt提供了一个可定制的路线"
      },
      {
        "source": "baidu",
        "value": "Nuxt提供了一个可定制的路由中间件框架，可以在整个应用程序中使用，非常适合于在导航到特定路由之前提取要运行的代码。"
      }
    ],
    "sentence": "Nuxt provides a customizable route middleware framework you can use throughout your application, ideal for extracting code that you want to run before navigating to a particular route."
  },
  {
    "word": "dynamic",
    "translation": [
      {
        "source": "google",
        "value": "NUXT通过使用动态导入来运送所需路由的JavaScript的最小值来利用每个页面上的代码分解。"
      },
      { "source": "youdaotrans", "value": "Nuxt利用通过代码分隔每个页面上使用" }
    ],
    "sentence": "Nuxt leverages code-splitting on each page by using dynamic imports to ship the minimum of JavaScript for the requested route."
  },
  {
    "word": "leverages",
    "translation": [
      {
        "source": "google",
        "value": "NUXT通过使用动态导入来运送所需路由的JavaScript的最小值来利用每个页面上的代码分解。"
      },
      {
        "source": "youdaotrans",
        "value": "Nuxt利用通过代码分隔每个页面上使用"
      },
      {
        "source": "baidu",
        "value": "Nuxt利用每个页面上的代码拆分，通过使用动态导入为请求的路由提供最少的JavaScript。"
      }
    ],
    "sentence": "Nuxt leverages code-splitting on each page by using dynamic imports to ship the minimum of JavaScript for the requested route."
  },
  {
    "word": "variables",
    "translation": [
      {
        "source": "google",
        "value": "在此示例中，有一个sass部分文件，其中包含nuxt页面和组件要使用的颜色变量"
      },
      {
        "source": "youdaotrans",
        "value": "在这个例子中,有一个萨斯部分文件控制"
      },
      {
        "source": "baidu",
        "value": "在此示例中，有一个sass部分文件，其中包含Nuxt页面和组件使用的颜色变量"
      }
    ],
    "sentence": "In this example, there is a sass partial file containing color variables to be used by your Nuxt pages and components"
  },
  {
    "word": "globally",
    "translation": [
      {
        "source": "google",
        "value": "要在NUXT组件样式中全球插入语句，您可以在nuxt.config文件上使用vite选项。"
      },
      { "source": "youdaotrans", "value": "在你的Nuxt全球insert语句成分" },
      {
        "source": "baidu",
        "value": "要在Nuxt组件样式中全局插入语句，可以在Nuxt处使用Vite选项。配置文件。"
      }
    ],
    "sentence": "To globally insert statements in your Nuxt components styles, you can use the Vite option at your nuxt.config file."
  },
  {
    "word": "extension",
    "translation": [
      {
        "source": "google",
        "value": "例如，引用一个图像文件，如果配置了构建工具来处理此文件扩展名，该图像文件将被处理："
      },
      { "source": "youdaotrans", "value": "例如,引用一个图像文件,将b" },
      {
        "source": "baidu",
        "value": "例如，如果将生成工具配置为处理此文件扩展名，则引用将处理的图像文件："
      }
    ],
    "sentence": "For example, referencing an image file that will be processed if a build tool is configured to handle this file extension:"
  },
  {
    "word": "invalidation",
    "translation": [
      {
        "source": "google",
        "value": "此步骤主要用于性能或缓存目的（例如Stylesheets Minification或浏览器缓存无效）。"
      },
      { "source": "youdaotrans", "value": "这一步主要用于转换原始文件" }
    ],
    "sentence": "This step transforms the original file mainly for performance or caching purposes (such as stylesheets minification or browser cache invalidation)."
  },
  {
    "word": "process",
    "translation": [
      {
        "source": "google",
        "value": "这些构建工具的主要功能是处理JavaScript文件，但是可以通过插件（用于VITE）或加载程序（用于WebPack）进行扩展，以处理其他类型的资产，例如样式表，字体或SVG。"
      },
      { "source": "youdaotrans", "value": "这些构建工具的主要功能是处理" },
      {
        "source": "baidu",
        "value": "这些构建工具的主要功能是处理JavaScript文件，但它们可以通过插件（用于Vite）或加载程序（用于Webpack）进行扩展，以处理其他类型的资产，如样式表、字体或SVG。"
      }
    ],
    "sentence": "The main function of these build tools is to process JavaScript files, but they can be extended through plugins (for Vite) or loaders (for Webpack) to process other kind of assets, like stylesheets, fonts or SVG."
  },
  {
    "word": "folder",
    "translation": [
      {
        "source": "google",
        "value": "在Visual Studio代码中打开NUXT-APP文件夹："
      },
      {
        "source": "youdaotrans",
        "value": "打开nuxt-app文件夹在Visual Studio代码:"
      },
      {
        "source": "baidu",
        "value": "在Visual Studio代码中打开nuxt应用程序文件夹："
      }
    ],
    "sentence": "Open nuxt-app folder in Visual Studio Code:"
  },
  {
    "word": "integrated terminal",
    "translation": [
      {
        "source": "google",
        "value": "打开终端或从Visual Studio代码中打开一个集成的终端，并使用以下命令创建一个新的入门项目："
      },
      {
        "source": "youdaotrans",
        "value": "打开终端,或从Visual Studio代码,打开"
      },
      {
        "source": "baidu",
        "value": "打开终端，或从Visual Studio代码中打开集成终端，然后使用以下命令创建新的启动程序项目："
      }
    ],
    "sentence": "Open a terminal, or from Visual Studio Code , open an integrated terminal and use the following command to create a new starter project:"
  },
  {
    "word": "or above",
    "translation": [
      {
        "source": "google",
        "value": "*如果您已经安装了node.js，请与Node  -  Version检查您使用的版本14.16或以上16.11。"
      },
      {
        "source": "youdaotrans",
        "value": "*如果你已经安装了node . js,检查智慧"
      },
      {
        "source": "baidu",
        "value": "*如果您已经拥有节点。js已安装，请使用node检查您使用的版本14.16或更高版本16.11。"
      }
    ],
    "sentence": "* If you already have Node.js installed, check with node --version that you are using version 14.16 or above 16.11."
  },
  {
    "word": "Prerequisites",
    "translation": [
      { "source": "google", "value": "先决条件" },
      { "source": "youdaotrans", "value": "先决条件" },
      { "source": "baidu", "value": "先决条件" }
    ],
    "sentence": "Prerequisites"
  },
  {
    "word": "diving into",
    "translation": [
      {
        "source": "google",
        "value": "这是通过实际潜入代码来学习NUXT的最佳方法。"
      },
      { "source": "youdaotrans", "value": "这是最好的学习方式Nuxt,实际上di" }
    ],
    "sentence": "This is the best way to learn Nuxt, by actually diving into the code."
  },
  {
    "word": "Take a stab at",
    "translation": [
      { "source": "google", "value": "在一个公开问题上刺伤。" },
      { "source": "youdaotrans", "value": "尝试一个开放的问题。" }
    ],
    "sentence": "Take a stab at an open issue ."
  },
  {
    "word": "Take a stab",
    "translation": [
      { "source": "google", "value": "在一个公开问题上刺伤。" },
      { "source": "youdaotrans", "value": "尝试一个开放的问题。" },
      { "source": "baidu", "value": "尝试解决一个悬而未决的问题。" }
    ],
    "sentence": "Take a stab at an open issue ."
  },
  {
    "word": "Extendable",
    "translation": [
      {
        "source": "google",
        "value": "可通过强大的模块生态系统和挂钩引擎扩展，它可以轻松连接您的休息或GraphQl端点，喜欢的CMS，CSS框架等。"
      },
      {
        "source": "youdaotrans",
        "value": "可扩展的生态系统与一个强大的模块和钩"
      },
      {
        "source": "baidu",
        "value": "通过强大的模块生态系统和挂钩引擎进行扩展，它可以轻松连接REST或GraphQL端点、喜爱的CMS、CSS框架等。"
      }
    ],
    "sentence": "Extendable with a strong module ecosystem and hooks engine, it makes it easy to connect your REST or GraphQL endpoints, favorite CMS, CSS frameworks and more."
  },
  {
    "word": "confidence",
    "translation": [
      {
        "source": "google",
        "value": "NUXT是您vue.js项目的骨干，为建立您的项目提供了自信的结构，同时保持灵活性。"
      },
      { "source": "youdaotrans", "value": "Nuxt Vue.js项目的支柱,亲密关系" }
    ],
    "sentence": "Nuxt is the backbone of your Vue.js project, giving structure to build your project with confidence while keeping flexibility."
  },
  {
    "word": "directory structure",
    "translation": [
      {
        "source": "google",
        "value": "除了此设置之外，NUXT提供了一个目录结构以遵循，重点是特定功能，以保持专注于创建而不是配置。"
      },
      { "source": "youdaotrans", "value": "这个设置,圣Nuxt提供了一个目录" },
      {
        "source": "baidu",
        "value": "在此设置之上，Nuxt提供了一个可遵循的目录结构，重点关注特定的功能，以保持您的注意力集中在创建而不是配置上。"
      }
    ],
    "sentence": "On top of this setup, Nuxt provides a directory structure to follow, focused on specific features to keep your focus on creating, not configuring."
  },
  {
    "word": "client-side",
    "translation": [
      {
        "source": "google",
        "value": "一个路由库来处理客户端导航，我们选择了Vue-Router。"
      },
      { "source": "youdaotrans", "value": "一个路由库来处理客户端导航" },
      {
        "source": "baidu",
        "value": "一个用于处理客户端导航的路由库，我们选择了vue路由器。"
      }
    ],
    "sentence": "A routing library to handle client-side navigation, we chose vue-router ."
  },
  {
    "word": "unmatched",
    "translation": [
      {
        "source": "google",
        "value": "NUXT使用H3用于部署多功能性，例如Serverless，Workers，Node.js和无与伦比的性能，用于为服务器端渲染或API路由提供服务的服务器，还可以支持服务器端渲染或API路由。"
      },
      { "source": "youdaotrans", "value": "发展为应用程序服务的服务器" },
      {
        "source": "baidu",
        "value": "Nuxt是一个在开发中为应用程序提供服务的服务器，同时也支持服务器端渲染或API路由，它使用h3实现部署的多功能性，如无服务器、工人、节点。js和无与伦比的性能。"
      }
    ],
    "sentence": "A server for serving your application in development, but also to support server-side rendering or API routes, Nuxt uses h3 for deployment versatility such as serverless, workers, Node.js and unmatched performance."
  },
  {
    "word": "versatility",
    "translation": [
      {
        "source": "google",
        "value": "NUXT使用H3用于部署多功能性，例如Serverless，Workers，Node.js和无与伦比的性能，用于为服务器端渲染或API路由提供服务的服务器，还可以支持服务器端渲染或API路由。"
      },
      { "source": "youdaotrans", "value": "发展为应用程序服务的服务器" },
      {
        "source": "baidu",
        "value": "Nuxt是一个在开发中为应用程序提供服务的服务器，同时也支持服务器端渲染或API路由，它使用h3实现部署的多功能性，如无服务器、工人、节点。js和无与伦比的性能。"
      }
    ],
    "sentence": "A server for serving your application in development, but also to support server-side rendering or API routes, Nuxt uses h3 for deployment versatility such as serverless, workers, Node.js and unmatched performance."
  },
  {
    "word": "Hybrid",
    "translation": [
      { "source": "google", "value": "混合VUE框架" },
      { "source": "youdaotrans", "value": "混合Vue框架" }
    ],
    "sentence": "The Hybrid Vue Framework"
  },
  {
    "word": "experience",
    "translation": [
      {
        "source": "google",
        "value": "使用VUE 3构建您的下一个应用程序，并体验混合渲染，强大的数据获取和新功能。"
      },
      {
        "source": "youdaotrans",
        "value": "构建您的下一个应用程序与Vue 3和经过"
      },
      {
        "source": "baidu",
        "value": "使用Vue 3构建下一个应用程序，体验混合渲染、强大的数据获取和新功能。"
      }
    ],
    "sentence": "Build your next application with Vue 3 and experience hybrid rendering, powerful data fetching and new features."
  },
  {
    "word": "repository",
    "translation": [
      { "source": "google", "value": "欢迎来到NUXT 3存储库：混合VUE框架" },
      { "source": "youdaotrans", "value": "欢迎来到Nuxt 3库:混合Vue框架" },
      { "source": "baidu", "value": "欢迎使用Nuxt 3存储库：混合Vue框架" }
    ],
    "sentence": "Welcome to Nuxt 3 repository: The Hybrid Vue Framework"
  },
  {
    "word": "temporarily",
    "translation": [
      {
        "source": "google",
        "value": "此外，您可以利用PausableFilter暂时暂停一些事件。"
      },
      { "source": "youdaotrans", "value": "此外,你可以利用pausableFilter时间" },
      {
        "source": "baidu",
        "value": "此外，您可以利用pausableFilter暂时暂停一些事件。"
      }
    ],
    "sentence": "Moreover, you can utilize pausableFilter to temporarily pause some events."
  },
  {
    "word": "automate",
    "translation": [
      {
        "source": "google",
        "value": "HelpShift为您提供一套完整的集成API，使您可以使用帮助档自动化，扩展和自定义支持解决方案。"
      },
      { "source": "youdaotrans", "value": "Helpshift为您提供全套的施暴者" }
    ],
    "sentence": "Helpshift provides you with a full set of integration APIs that allow you to automate, extend and customize your support solutions with Helpshift."
  },
  {
    "word": "integration",
    "translation": [
      {
        "source": "google",
        "value": "HelpShift为您提供一套完整的集成API，使您可以使用帮助档自动化，扩展和自定义支持解决方案。"
      },
      { "source": "youdaotrans", "value": "Helpshift为您提供全套的施暴者" },
      {
        "source": "baidu",
        "value": "Helpshift为您提供了一整套集成API，允许您使用Helpshift自动化、扩展和自定义支持解决方案。"
      }
    ],
    "sentence": "Helpshift provides you with a full set of integration APIs that allow you to automate, extend and customize your support solutions with Helpshift."
  },
  {
    "word": "provides",
    "translation": [
      {
        "source": "google",
        "value": "HelpShift为您提供一套完整的集成API，使您可以使用帮助档自动化，扩展和自定义支持解决方案。"
      },
      { "source": "youdaotrans", "value": "Helpshift为您提供全套的施暴者" },
      {
        "source": "baidu",
        "value": "Helpshift为您提供了一整套集成API，允许您使用Helpshift自动化、扩展和自定义支持解决方案。"
      }
    ],
    "sentence": "Helpshift provides you with a full set of integration APIs that allow you to automate, extend and customize your support solutions with Helpshift."
  },
  {
    "word": "prepared",
    "translation": [
      {
        "source": "google",
        "value": "您可以在设置&gt; App&gt; Web Chat上找到已准备好的应用程序的嵌入代码。"
      },
      {
        "source": "youdaotrans",
        "value": "你可以找到一个准备嵌入代码为您的应用程序"
      },
      {
        "source": "baidu",
        "value": "您可以在“设置”&gt;“应用程序”&gt;“网络聊天”中找到已准备好的应用程序嵌入代码。"
      }
    ],
    "sentence": "You can find a prepared embed code for your App at Settings &gt; App &gt; Web Chat."
  },
  {
    "word": "toon",
    "translation": [
      { "source": "google", "value": "香槟" },
      { "source": "youdaotrans", "value": "图恩" },
      { "source": "baidu", "value": "香椿" }
    ]
  },
  {
    "word": "shiny",
    "translation": [
      { "source": "google", "value": "带有镜面亮点的闪亮表面的材料。" },
      { "source": "youdaotrans", "value": "材料与镜面highli闪亮的表面" },
      { "source": "baidu", "value": "用于具有镜面反射高光的闪亮曲面的材质。" }
    ],
    "sentence": "A material for shiny surfaces with specular highlights."
  },
  {
    "word": "generation",
    "translation": [
      { "source": "google", "value": "一代" },
      { "source": "youdaotrans", "value": "一代" },
      { "source": "baidu", "value": "一代" }
    ]
  },
  {
    "word": "mipmap",
    "translation": [
      { "source": "网络", "value": "贴图细化；纹理；纹理的明细层次" }
    ]
  },
  {
    "word": "mirrored",
    "translation": [
      { "source": "google", "value": "镜像" },
      { "source": "youdaotrans", "value": "镜像" },
      { "source": "baidu", "value": "镜像的" }
    ]
  }
]
